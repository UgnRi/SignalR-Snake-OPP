@using System.Web.UI.WebControls
@using SignalR_Snake.Models
@model dynamic

@{
    ViewBag.Title = "Snake";
    Snake snake = Model;
    if (snake.Name == null)
    {
        Response.Redirect("~/Home/");
    }
}
<canvas id="field" height="2000" width="2000"></canvas>
<div id="chatbox" style="position: fixed; bottom: 10px; right: 10px; width: 150px; height: 100px; overflow-y: auto; background-color: rgba(0,0,0,0.8); color: white; padding: 10px; border-radius: 5px;">
    <p><strong>Chat:</strong></p>
</div>

@section scripts {
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        var canvas = document.getElementById('field');
        var ctx = canvas.getContext('2d');
        var cursorX = 0;
        var cursorY = 0;
        var snakeParts = [];
        var scores = [];
        var Gfoods = [];
        var myPoint;
        var lastUpdateTime = Date.now();
        var throttleDelay = 100; // milliseconds

        $(function () {
            // Connection setup
            var com = $.connection.snakeHub;

            // SignalR client-side methods
            com.client.allPos = function (positions, mPoint, foods) {
                snakeParts = positions;
                Gfoods = foods;
                myPoint = mPoint;
            };
            com.client.myPos = function (point) {
                myPoint = point;
            };
            com.client.NewSnakeCreated = function (snakeName) {
                alert("A new snake has been created: " + snakeName);
            };
            com.client.score = function (snekS) {
                scores = snekS;
            };
            com.client.died = function () {
                $.connection.hub.stop();
                window.location.href = "";
            };
            com.client.PostMessageToChatbox = function (message) {
                var chatbox = document.getElementById('chatbox');
                var messageElement = document.createElement('p');
                messageElement.textContent = message;
                chatbox.appendChild(messageElement);
                chatbox.scrollTop = chatbox.scrollHeight;
            };

            // Mouse event handling (throttled)
            document.onmousemove = function (e) {
                var now = Date.now();
                if (now - lastUpdateTime > throttleDelay) {
                    var rect = canvas.getBoundingClientRect();
                    cursorX = (e.clientX - rect.left) / (rect.right - rect.left) * canvas.width;
                    cursorY = (e.clientY - rect.top) / (rect.bottom - rect.top) * canvas.height;
                    lastUpdateTime = now;
                }
            };

            // Mouse click handling
            document.onmousedown = document.onmouseup = function () {
                com.server.speed();
            };

            // Start SignalR connection
            $.connection.hub.start().done(function () {
                com.server.newSnek('@snake.Name', '@snake.SnakeType');

                // Main game loop using requestAnimationFrame
                function gameLoop() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    updateGameState();
                    drawGameObjects();
                    requestAnimationFrame(gameLoop);
                }

                function updateGameState() {
                    com.server.allPos();
                    if (myPoint && cursorX && cursorY) {
                        var d = myPoint.split(",");
                        var v1 = { x: cursorX - d[0], y: cursorY - d[1] };
                        var angle = Math.atan2(v1.y, v1.x) * 180 / Math.PI;
                        com.server.sendDir(angle);
                    }
                }

                function drawGameObjects() {
                    // Draw snakes
                    if (snakeParts) {
                        snakeParts.forEach(part => {
                            var d = part.Position.split(",");
                            ctx.fillStyle = part.Color;
                            ctx.beginPath();
                            ctx.arc(d[0], d[1], 10, 0, 2 * Math.PI);
                            ctx.stroke();
                            ctx.fill();
                            if (part.Name) {
                                ctx.font = "20px Calibri";
                                ctx.fillStyle = 'white';
                                ctx.fillText(part.Name, d[0] - (part.Name.length / 2), d[1] + 25);
                            }
                        });
                    }

                    // Draw food
                    if (Gfoods) {
                        Gfoods.forEach(food => {
                            var f = food.Position.split(",");
                            ctx.fillStyle = food.Color;
                            ctx.beginPath();
                            ctx.arc(f[0], f[1], 2, 0, 2 * Math.PI);
                            ctx.stroke();
                            ctx.fill();
                        });
                    }

                    // Draw scores
                    if (scores) {
                        ctx.font = "20px Calibri";
                        ctx.fillStyle = 'white';
                        var maxScoresToDisplay = Math.min(scores.length, 10);
                        for (var i = 0; i < maxScoresToDisplay; i++) {
                            ctx.fillText(i + 1 + ". (" + scores[i].Length * 10 + ") " + scores[i].SnakeName, canvas.width - 250, 100 + (30 * i));
                        }
                    }
                }

                // Start game loop
                gameLoop();

                // Periodic updates (less frequent)
                setInterval(function () {
                    com.server.score();
                }, 1000);
            });
        });
    </script>
}
