@using SignalR_Snake.Models
@model dynamic

@{
    ViewBag.Title = "Snake";
    Snake snake = Model;
    if (snake.Name == null)
    {
        Response.Redirect("~/Home/");
    }
}
</head>
<body>
    <canvas id="field" height="2000" width="2000"></canvas>
    <div id="chatbox" style="position: fixed; bottom: 10px; right: 10px; width: 200px; height: 150px; overflow-y: auto; background-color: rgba(0,0,0,0.8); color: white; padding: 10px; border-radius: 5px;">
        <p><strong>Chat:</strong></p>
    </div>
    <button id="generateColorsButton" style="position: absolute; top: 10px; left: 10px;">Generate Random Colors (50 Requests)</button>
</body>
</html>



@section scripts {
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        class Projectile {
            constructor(id, ownerId, startX, startY, targetX, targetY, speed = 5) {
                this.Id = id;
                this.OwnerId = ownerId;
                this.X = startX;
                this.Y = startY;
                this.Radius = 5; // Default radius
                this.Speed = speed;
                //this.IsActive = this.IsOutOfBounds(canvas.width, canvas.height);

                // Calculate direction vector
                const directionX = targetX - startX;
                const directionY = targetY - startY;
                const magnitude = Math.sqrt(directionX * directionX + directionY * directionY);

                // Normalize and set direction
                this.DirectionX = (directionX / magnitude) * speed;
                this.DirectionY = (directionY / magnitude) * speed;
            }

            // Update projectile position
            UpdatePosition() {
                this.X += this.DirectionX;
                this.Y += this.DirectionY;
            }

            // Check if the projectile is out of bounds (assuming bounds are defined)
            IsOutOfBounds(canvasWidth, canvasHeight) {
                return this.X < 0 || this.X > canvasWidth || this.Y < 0 || this.Y > canvasHeight;
            }
        }
        var hub = $.connection.snakeHub;
        var canvas = document.getElementById('field');
        var ctx = canvas.getContext('2d');
        var cursorX = 0;
        var cursorY = 0;
        var snakeParts = [];
        var scores = [];
        var Gfoods = [];
        var myProjectiles = [];
        var myPoint;
        var lastUpdateTime = Date.now();
        var throttleDelay = 100;
        //var canvas = document.getElementById('field');
        //canvas.width = window.innerWidth;  // Adjust canvas width dynamically
        //canvas.height = window.innerHeight;  // Adjust canvas height dynamically

        $(function () {
            // Connection
            var com = $.connection.snakeHub;

            // SignalR
            com.client.allPos = function (positions, mPoint, foods) {
                snakeParts = positions;
                Gfoods = foods;
                myPoint = mPoint;
            };
            com.client.myPos = function (point) {
                myPoint = point;
            };
            com.client.NewSnakeCreated = function (snakeName) {
                alert("A new snake has been created: " + snakeName);
            };
            com.client.score = function (snekS) {
                scores = snekS;
            };
            com.client.died = function () {
                $.connection.hub.stop();
                window.location.href = "";
            };
            com.client.notifyChat = function (message) {
                var chatbox = document.getElementById('chatbox');
                var messageElement = document.createElement('p');
                messageElement.style.fontSize = '6px';
                messageElement.textContent = message;
                chatbox.appendChild(messageElement);
                chatbox.scrollTop = chatbox.scrollHeight;
            };
            com.client.PostMessageToChatbox = function (message) {
                var chatbox = document.getElementById('chatbox');
                var messageElement = document.createElement('p');
                messageElement.textContent = message;
                chatbox.appendChild(messageElement);
                chatbox.scrollTop = chatbox.scrollHeight;
            };

            // Mouse event
            document.onmousemove = function (e) {
                var now = Date.now();
                if (now - lastUpdateTime > throttleDelay) {
                    var rect = canvas.getBoundingClientRect();
                    cursorX = (e.clientX - rect.left) / (rect.right - rect.left) * canvas.width;
                    cursorY = (e.clientY - rect.top) / (rect.bottom - rect.top) * canvas.height;
                    lastUpdateTime = now;
                }
            };

            // Add projectile on mouse click
            document.addEventListener('mousedown', function (e) {
                if (e.button === 0 && myPoint) { // Left mouse button
                    var d = myPoint.split(",");
                    var snakeX = parseFloat(d[0]);
                    var snakeY = parseFloat(d[1]);
                    console.log("Pressed");
                    hub.server.holdProjectiles(snakeX, snakeY, cursorX, cursorY, 5);
                    console.log("Executed");

/* 
                    var id = Date.now();
                    var ownerId = hub.id;

                    var projectile = new Projectile(id, ownerId, snakeX, snakeY, cursorX, cursorY);
                    myProjectiles.push(projectile);

                    hub.server.sendProjectileData(
                        {
                            Id: projectileId,
                            OwnerId: $.connection.hub.id,
                            X: projectile.X,
                            Y: projectile.Y,
                            DirectionX: projectile.DirectionX,
                            DirectionY: projectile.DirectionY,
                            Radius: projectile.Radius
                        });*/

                    
                }
            });

            com.client.receiveProjectile = function (projectile) {
                myProjectiles.push(new Projectile(projectile.Id, projectile.OwnerId, projectile.X, projectile.Y, projectile.DirectionX, projectile.DirectionY, 5));
                hub.server.playTapSound();;
            };

                            com.client.drawAllReleasedProjectiles = function () {
                    myProjectiles.forEach(proj => {
                        ctx.fillStyle = 'red';
                        ctx.beginPath();
                        ctx.arc(proj.X, proj.Y, proj.Radius, 0, 2 * Math.PI);
                        ctx.fill();
                    });
                };

            document.addEventListener('keydown', function (e) {
                if (e.key === 'w') {
                    hub.server.changeMovementStrategy('boost');
                    //hub.server.playFastForwardSound();
                    //hub.server.playTapSound();
                }
                if (e.key === 's') {
                    hub.server.changeMovementStrategy('stop');
                    hub.server.stopAllSounds()
                    console.log("Pressed S");
                    hub.server.releaseAllProjectiles();
                    console.log("Executed FIRE");
                }
                if (e.key === 'a') {
                    hub.server.changeMovementStrategy('slow');
                }
                if (e.key === 'd') {
                    hub.server.changeMovementStrategy('normal');
                    hub.server.stopSound();
                }
            });

            // Start SignalR
            $.connection.hub.start().done(function () {
                hub.server.playBackgroundSound();
                com.server.newSnek('@snake.Name', '@snake.Shape');

                // game loop
                function gameLoop() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    updateGameState();
                    drawGameObjects();
                    updateProjectiles(); // Update projectile positions
                    drawProjectiles();
                    requestAnimationFrame(gameLoop);
                }

                function updateGameState() {
                    com.server.allPos();
                    if (myPoint && cursorX && cursorY) {
                        var d = myPoint.split(",");
                        var v1 = { x: cursorX - d[0], y: cursorY - d[1] };
                        var angle = Math.atan2(v1.y, v1.x) * 180 / Math.PI;
                        com.server.sendDir(angle);
                    }

                }

                function drawGameObjects() {
                    if (snakeParts) {
                        snakeParts.forEach(part => {
                            var d = part.Position.split(",");
                            const x = parseFloat(d[0]);
                            const y = parseFloat(d[1]);
                            ctx.fillStyle = part.Color;
                            ctx.beginPath();
                            switch (part.Shape) {
                                case 'circle':
                                    ctx.arc(x, y, 10, 0, 2 * Math.PI);
                                    break;
                                case 'square':
                                    ctx.rect(x - 10, y - 10, 20, 20);
                                    break;
                                case 'triangle':
                                    ctx.moveTo(x, y - 12);
                                    ctx.lineTo(x - 10, y + 10);
                                    ctx.lineTo(x + 10, y + 10);
                                    ctx.closePath();
                                    break;
                                default:
                                    ctx.arc(x, y, 10, 0, 2 * Math.PI);
                            }
                            ctx.stroke();
                            ctx.fill();

                            if (part.Name) {
                                ctx.font = "20px Calibri";
                                ctx.fillStyle = 'white';
                                ctx.fillText(part.Name, x - (part.Name.length * 5 / 2), y + 25);
                            }
                        });
                    }

                    // Draw food
                    if (Gfoods) {
                        Gfoods.forEach(food => {
                            var f = food.Position.split(",");
                            ctx.fillStyle = food.Color;
                            ctx.beginPath();
                            ctx.arc(f[0], f[1], 2, 0, 2 * Math.PI);
                            ctx.stroke();
                            ctx.fill();
                        });
                    }

                    // Draw scores
                    if (scores) {
                        ctx.font = "20px Calibri";
                        ctx.fillStyle = 'white';
                        var maxScoresToDisplay = Math.min(scores.length, 10);
                        for (var i = 0; i < maxScoresToDisplay; i++) {
                            ctx.fillText(i + 1 + ". (" + scores[i].Length * 10 + ") " + scores[i].SnakeName, canvas.width - 250, 100 + (30 * i));
                        }
                    }
                }

                function updateProjectiles() {
                    myProjectiles.forEach((proj, index) => {
                        proj.UpdatePosition();
                        console.log(`Projectile ${index}: X = ${proj.X}, Y = ${proj.Y}`);

                        if (proj.IsOutOfBounds(canvas.width, canvas.height)) {
                            myProjectiles.splice(index, 1);
                        }
                    });
                }

                function drawProjectiles() {
                    myProjectiles.forEach(proj => {
                        ctx.fillStyle = 'red';
                        ctx.beginPath();
                        ctx.arc(proj.X, proj.Y, proj.Radius, 0, 2 * Math.PI);
                        ctx.fill();
                    });
                }

                // Start game loop
                gameLoop();

                // updates
                setInterval(function () {
                    hub.server.score();
                }, 1000);

                $('#generateColorsButton').click(function () {
                    for (var i = 0; i < 50; i++) { // 50 concurrent requests
                        hub.server.generateRandomColorForClient();
                    }
                });
            });
        });
    </script>
}
